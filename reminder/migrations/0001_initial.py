# Generated by Django 3.0.5 on 2022-04-25 02:25

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Alert_Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'verbose_name': 'リマインダーカテゴリー',
                'verbose_name_plural': 'リマインダーカテゴリー',
            },
        ),
        migrations.CreateModel(
            name='Alert_Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'verbose_name': 'リマインダータグ',
                'verbose_name_plural': 'リマインダータグ',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'verbose_name': '資料庫カテゴリー',
                'verbose_name_plural': '資料庫カテゴリー',
            },
        ),
        migrations.CreateModel(
            name='Pisto_Alert_Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'verbose_name': '合宿リマインダーカテゴリー',
                'verbose_name_plural': '合宿リマインダーカテゴリー',
            },
        ),
        migrations.CreateModel(
            name='Pisto_Alert_Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'verbose_name': '合宿リマインダータグ',
                'verbose_name_plural': '合宿リマインダータグ',
            },
        ),
        migrations.CreateModel(
            name='Receipt_Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'verbose_name': '建て替え人登録',
                'verbose_name_plural': '建て替え人登録',
            },
        ),
        migrations.CreateModel(
            name='Receipt_Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'verbose_name': '建て替えレシートタグ',
                'verbose_name_plural': '建て替えレシートタグ',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'verbose_name': '資料庫タグ',
                'verbose_name_plural': '資料庫タグ',
            },
        ),
        migrations.CreateModel(
            name='Receipt_data',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('receipt', models.ImageField(upload_to='images', verbose_name='レシート')),
                ('date', models.DateTimeField(verbose_name='建て替え日')),
                ('title', models.CharField(max_length=255, verbose_name='タイトル')),
                ('body', models.TextField(blank=True, help_text='HTMLタグは使えません。', null=True, verbose_name='備考')),
                ('price', models.IntegerField(default=0, verbose_name='金額')),
                ('published', models.BooleanField(default=True, verbose_name='公開する')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reminder.Receipt_Category', verbose_name='建て替え人')),
                ('tags', models.ManyToManyField(blank=True, to='reminder.Receipt_Tag', verbose_name='タグ')),
            ],
            options={
                'verbose_name': '建て替えレシート登録',
                'verbose_name_plural': '建て替えレシート登録',
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='作成日')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='最終更新日')),
                ('title', models.CharField(max_length=255, verbose_name='タイトル')),
                ('body', models.TextField(blank=True, help_text='HTMLタグは使えません。', verbose_name='本文')),
                ('published', models.BooleanField(default=True, verbose_name='公開する')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reminder.Category', verbose_name='カテゴリ')),
                ('tags', models.ManyToManyField(blank=True, to='reminder.Tag', verbose_name='タグ')),
            ],
            options={
                'verbose_name': '資料庫',
                'verbose_name_plural': '資料庫',
            },
        ),
        migrations.CreateModel(
            name='Pisto_Alert',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('schedule1', models.DateTimeField(verbose_name='集合日')),
                ('schedule2', models.DateTimeField(verbose_name='最終日')),
                ('alert_time', models.DateTimeField(verbose_name='リマインダー日')),
                ('title', models.CharField(max_length=255, verbose_name='合宿名')),
                ('body', models.TextField(blank=True, help_text='HTMLタグは使えません。', verbose_name='リマインダー文')),
                ('published', models.BooleanField(default=True, verbose_name='公開する')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reminder.Pisto_Alert_Category', verbose_name='合宿場所')),
                ('tags', models.ManyToManyField(blank=True, to='reminder.Alert_Tag', verbose_name='タグ')),
            ],
            options={
                'verbose_name': '合宿リマインダー設定',
                'verbose_name_plural': '合宿リマインダー設定',
            },
        ),
        migrations.CreateModel(
            name='Alert',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('schedule', models.DateTimeField(verbose_name='予定日')),
                ('alert_time', models.DateTimeField(verbose_name='リマインダー日')),
                ('title', models.CharField(max_length=255, verbose_name='タイトル')),
                ('body', models.TextField(blank=True, help_text='HTMLタグは使えません。', verbose_name='リマインダー文')),
                ('published', models.BooleanField(default=True, verbose_name='公開する')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reminder.Alert_Category', verbose_name='カテゴリ')),
                ('tags', models.ManyToManyField(blank=True, to='reminder.Alert_Tag', verbose_name='タグ')),
            ],
            options={
                'verbose_name': 'リマインダー設定',
                'verbose_name_plural': 'リマインダー設定',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
